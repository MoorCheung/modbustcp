package main

import (
	"ServerModbus/tool"
	"encoding/binary"
	"fmt"
	"github.com/go-log/log"
	"net"
	"time"
)
var funmap1 = map[int]string{
	0:"屏启动",
	1:"屏停止",
	2:"屏报警消音",
	3:"运行标识",
	4:"点火完成",
	5:"温度上限警告",
	6:"点火报警1",
	7:"点火报警2",
	8:"火灭报警",
	9:"风机反馈",
	10:"风机反馈",
	11:"火焰反馈",
	12:"变频故障",
	13:"点火反馈",
	14:"报警器",
	15:"开阀",
	16:"变频启停",
	17:"点火线圈",

}
var funmap3 = map[int]string{
	0:"吹扫延时设定",
	1:"点火延时设定",
	2:"设定温度",
	3:"温度上限",
	4:"实际温度",
	5:"调节阀开度输出",
	6:"风机吹扫延时",
	7:"点火延时",
}

//字节转换成整形
func BytesToInt(b []byte) int {
	fmt.Println("mmm",b)
	return int(binary.BigEndian.Uint16(b))
	//return int(x)
}
func unpack(conn net.Conn,buf []byte) ([]byte, error) {
	//  read head
	//if 0 != this.readTimeoutSec {
	//	this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
	//}
	headBuf := buf[:6]
	n, err := conn.Read(headBuf)
	fmt.Println("nnnn",n,err)

	if err != nil {
		return nil, err
	}

	//  check length
	packetLength := BytesToInt(headBuf[4:6])
	fmt.Println("packetLength",packetLength,headBuf)
	//if packetLength > this.maxReadBufferLength ||
	if	0 == packetLength {
		fmt.Println("长度0")
	}

	//  read body
	//if 0 != this.readTimeoutSec {
	//	this.conn.SetReadDeadline(time.Now().Add(time.Duration(this.readTimeoutSec) * time.Second))
	//}

	bodyLength := packetLength
	bufbody := make([]byte,bodyLength)
	_, err = conn.Read(bufbody[:bodyLength])
	if err != nil {
		return nil, err
	}

	//  ok
	msg := make([]byte, bodyLength + 6)
	copy(msg, buf[:6])
	copy(msg[6:], bufbody[:bodyLength])
	return msg, nil
}
func CheckError(err error){
	fmt.Println(err)
}
func  main(){
	//初始化tcp
	netListen, err := net.Listen("tcp", ":9001")
	CheckError(err)

	defer netListen.Close()

	log.Log("Waiting for clients")
	for {
		conn, err := netListen.Accept()
		if err != nil {
			continue
		}

		log.Log(conn.RemoteAddr().String(), " tcp connect success")
		//协程读
		go handleConnection(conn)
		//协程写
		go write(conn)
	}



}
func write(conn net.Conn){
	//通过通道进行读
	server := tool.Server{}
	server.Packager.SlaveId = 02
	for {
		results,err := server.ServerReadHoldingRegisters(2,1)
		if err != nil {
			fmt.Println(err)
		}else{
			conn.Write(results)
		}
		time.Sleep(1*time.Second)
	}


}

func handleConnection(conn net.Conn){
	for   {
		buf := make([]byte,2048)
		msg,err := unpack(conn,buf)
		if err != nil {
			fmt.Println("eeee",err)
			conn.Close()
			break
		}else{
			server := tool.Server{}
			server.Packager.SlaveId = 02
			pdu,err := server.Packager.Decode(msg)
			fmt.Println("pdu",pdu,err)
			switch pdu.FunctionCode {
			case 3:
				fmt.Println("接收功能码03",time.Now(),pdu.Data)
				for k,v := range pdu.Data{
					fmt.Println(k,v)
					name := funmap3[k]
					fmt.Println(name,v)
				}
			case 1:
				fmt.Println("01功能码")
				fmt.Println("接收功能码03",time.Now(),pdu.Data)
				for k,v := range pdu.Data{
					fmt.Println(k,v)
					name := funmap1[k]
					fmt.Println(name,v)
				}
			}

		}

	}
}
